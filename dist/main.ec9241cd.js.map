{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tableHead","tHead","rows","tableBody","tBodies","getParsedData","firstData","secondData","parseFloat","replace","getSortedRows","sortIndex","sortedRows","sort","row1","row2","children","textContent","firstParsedData","secondParsedData","localeCompare","getSortedRowsByField","sortField","tableTitles","tableTitleIdx","map","th","indexOf","tableRows","sortedTableRows","sortTable","event","targetItem","target","closest","tableTitle","append","addEventListener"],"mappings":";AAAA,aAuEA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EArEA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAYH,EAAMI,MAAMC,KAAK,GAC7BC,EAAYN,EAAMO,QAAQ,GAE1BC,EAAgB,SAACC,EAAWC,GAIzB,MAAA,CAHiBC,WAAWF,EAAUG,QAAQ,WAAY,KACxCD,WAAWD,EAAWE,QAAQ,WAAY,OAK/DC,EAAgB,SAACR,EAAMS,GAiBpBC,OAhBY,EAAIV,GAAMW,KAAK,SAACC,EAAMC,GACjCT,IAAAA,EAAYQ,EAAKE,SAASL,GAAWM,YACrCV,EAAaQ,EAAKC,SAASL,GAAWM,YAFI,EAAA,EAO5CZ,EAAcC,EAAWC,GAPmB,GAK9CW,EAL8C,EAAA,GAM9CC,EAN8C,EAAA,GAS5CD,OAAAA,GAAmBC,EACdD,EAAkBC,EAGpBb,EAAUc,cAAcb,MAM7Bc,EAAuB,SAACC,GACtBC,IAIAC,EAJc,EAAIxB,EAAUgB,UAAUS,IAAI,SAAAC,GAC9CA,OAAAA,EAAGT,cAG6BU,QAAQL,GAEtCE,KAAAA,EAAgB,GAAhBA,CAIEI,IAAAA,EAAgBzB,EAAAA,EAAUD,MAIzB2B,OAFiBnB,EAAckB,EAAWJ,KAM7CM,EAAY,SAACC,GACXC,IAAAA,EAAaD,EAAME,OAGrB,KAFeD,EAAWE,QAAQ,SAElC,CAIEC,IAAAA,EAAaH,EAAWf,YAExBL,EAAaS,EAAqBc,GAEnCvB,GAILT,EAAUiC,OAAVjC,MAAAA,EAAoBS,EAAAA,MAGtBf,EAAMwC,iBAAiB,QAASP","file":"main.ec9241cd.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tableHead = table.tHead.rows[0];\nconst tableBody = table.tBodies[0];\n\nconst getParsedData = (firstData, secondData) => {\n  const firstParsedData = parseFloat(firstData.replace(/[^\\d.-]/g, ''));\n  const secondParsedData = parseFloat(secondData.replace(/[^\\d.-]/g, ''));\n\n  return [firstParsedData, secondParsedData];\n};\n\nconst getSortedRows = (rows, sortIndex) => {\n  const sortedRows = [...rows].sort((row1, row2) => {\n    const firstData = row1.children[sortIndex].textContent;\n    const secondData = row2.children[sortIndex].textContent;\n\n    const [\n      firstParsedData,\n      secondParsedData,\n    ] = getParsedData(firstData, secondData);\n\n    if (firstParsedData && secondParsedData) {\n      return firstParsedData - secondParsedData;\n    }\n\n    return firstData.localeCompare(secondData);\n  });\n\n  return sortedRows;\n};\n\nconst getSortedRowsByField = (sortField) => {\n  const tableTitles = [...tableHead.children].map(th => (\n    th.textContent\n  ));\n\n  const tableTitleIdx = tableTitles.indexOf(sortField);\n\n  if (tableTitleIdx < 0) {\n    return;\n  }\n\n  const tableRows = [...tableBody.rows];\n\n  const sortedTableRows = getSortedRows(tableRows, tableTitleIdx);\n\n  return sortedTableRows;\n};\n\n/* eslint-disable-next-line no-shadow */\nconst sortTable = (event) => {\n  const targetItem = event.target;\n  const isHeader = !!targetItem.closest('thead');\n\n  if (!isHeader) {\n    return;\n  }\n\n  const tableTitle = targetItem.textContent;\n\n  const sortedRows = getSortedRowsByField(tableTitle);\n\n  if (!sortedRows) {\n    return;\n  }\n\n  tableBody.append(...sortedRows);\n};\n\ntable.addEventListener('click', sortTable);\n"]}